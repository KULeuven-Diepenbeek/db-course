[
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/",
	"title": "Hoorcolleges",
	"tags": [],
	"description": "",
	"content": " Slides Hoorcolleges 1. NoSQL Databases: Introductie 2. NoSQL Databases: Map/Reduce, Case Studies (1) 2. NoSQL Databases: Graph-based, Case Studies (2)  3. Transactie Management 4. Database APIs "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/nosql/keyvaluestores/",
	"title": "1. Key/value stores",
	"tags": [],
	"description": "",
	"content": " 1.1 Persistente Hashmaps De eenvoudigst mogelijke noSQL database die gebruik maakt van key/values is een simpele HashMap\u0026lt;K,V\u0026gt; die je zelf serialiseert naar een flat file op de HDD. Een netwerk share kan dit bestand delen, maar locking systemen zullen moeten ingebouwd worden om te voorkomen dat dit bestand corrupt wordt.\nDe \u0026ldquo;oude\u0026rdquo; manier om dit te doen in java is gebruik te maken van FileOutputStream:\npublic static void main(String[] args) throws IOException { var db = new HashMap\u0026lt;String, Object\u0026gt;(); db.put(\u0026#34;joske\u0026#34;, new Student(\u0026#34;Joske\u0026#34;, 11)); var file = new File(\u0026#34;database.db\u0026#34;); var f = new FileOutputStream(file); var s = new ObjectOutputStream(f); s.writeObject(db); s.close(); } Inlezen werkt op dezelfde manier, met FileInputStream en ObjectInputStream. Hoe je Student klasse wordt geserialiseerd kan je zelf kiezen als je de interface Serializable implementeert!\nMet bovenstaande interface kan je de student terug uitlezen:\nMap\u0026lt;String, Object\u0026gt; map = (Map\u0026lt;String, Object\u0026gt;) s.readObject(); Student joske = (Student) map.get(\u0026#34;joske\u0026#34;); System.out.println(joske.getName()); 1.1.1 Oefeningen  Werk bovenstaand voorbeeld uit en persisteer een aantal studenten met de volgende klasse:\npublic class Student { private final String name; private final int age; public Student(String name, int age) { this.name = name; this.age = age; } }  1.2 Distributed Hashmaps: Memcached Met de Java voorbeeldcode op pagina 307 kunnen we een verbinding maken met een (of meerdere) Memcached servers. De Memcached client van net.spy.spymemcached (zie mvn repo: https://mvnrepository.com/artifact/net.spy/spymemcached).\nDe client code vereist een werkende memcached server - https://www.memcached.org. Je kan dit zelf compileren onder UNIX of Msys in Windows. We gaan voor de oefeningen hier niet verder op in.\nDenkvragen  Welke beperkingen zijn er verbonden aan het geserialiseerd database bestand doorgeven aan andere medestudenten? Op welke manier kan je zo verschillende \u0026lsquo;clients\u0026rsquo; verbinden aan één database \u0026lsquo;server\u0026rsquo;?  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/nosql/",
	"title": "1. NoSQL",
	"tags": [],
	"description": "",
	"content": " NoSQL Databases  vanaf 29\u0026frasl;10. 5 lessen  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/nosql/documentstores/",
	"title": "2. Document stores",
	"tags": [],
	"description": "",
	"content": " 2.1 Eenvoudige CouchDB Queries Lui in die zetel liggen, en vanaf de bank met gemak query\u0026rsquo;s lanceren? Geen probleem met CouchDB, een open source NoSQL JSON-based document store.\nMango CouchDB heeft een eenvoudige ingebouwde query syntax genaamd Mango. Documentatie op https://github.com/cloudant/mango en http://127.0.0.1:5984/_utils/docs/intro/api.html#documents. Selecteer een database, klik op \u0026ldquo;run a query with Mango\u0026rdquo;:\n{ \u0026#34;selector\u0026#34;: { \u0026#34;year\u0026#34;: 3 } }  De selector attribute bepaalt op welke keys er wordt gefilterd. Indexen leggen op zwaar belaste \u0026ldquo;kolommen\u0026rdquo; (keys dus) is in geval van miljarden records zeker geen overbodige luxe.\nMango werkt met een selector syntax (zie documentatie) die impliciet bovenstaande omzet naar {\u0026quot;year\u0026quot;: {\u0026quot;$eq\u0026quot;: 3}}. Er zijn ook andere dollar-based operatoren. Geneste attributes kan je raadplegen met de . separator: {\u0026quot;student.name\u0026quot;: {\u0026quot;eq\u0026quot;: \u0026quot;Joske\u0026quot;}}.\nDe CouchDB API interface: alles via HTTP(S) curl is een snelle cmd-line tool waarbij je via -X kan meegeven of het over een HTTPs GET, POST, PUT, \u0026hellip; gaat. De DB locatie en poort met het juiste endpoint zijn hier de belangrijkste factoren. Een bepaald document raadplegen doe je met:\ncurl -X GET http://127.0.0.1:5984/[database]/[id] Het resultaat is altijd een geldig JSON object (ook al geef je een ongeldige ID mee): curl -X GET \u0026quot;http://127.0.0.1:5984/courses/aalto-university;bachelor-data-science;professional-development;1\u0026quot;\n{\u0026#34;_id\u0026#34;:\u0026#34;aalto-university;bachelor-data-science;professional-development;1\u0026#34;,\u0026#34;_rev\u0026#34;:\u0026#34;1-f7872c4254bfc2e0e5507502e2fafd6f\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;Professional Development\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;https://oodi.aalto.fi/a/opintjakstied.jsp?OpinKohd=1125443391\u0026amp;haettuOpas=-1\u0026#34;,\u0026#34;university\u0026#34;:\u0026#34;Aalto University\u0026#34;,\u0026#34;country\u0026#34;:\u0026#34;Finland\u0026#34;,\u0026#34;category\u0026#34;:\u0026#34;professional\u0026#34;,\u0026#34;ECTS\u0026#34;:5,\u0026#34;year\u0026#34;:1,\u0026#34;optional\u0026#34;:true,\u0026#34;skills\u0026#34;:[\u0026#34;motivate self\u0026#34;,\u0026#34;oral communication\u0026#34;,\u0026#34;self-directed learning\u0026#34;,\u0026#34;self-reflection\u0026#34;,\u0026#34;give/receive feedback\u0026#34;,\u0026#34;set/keep timelines\u0026#34;,\u0026#34;show initiative\u0026#34;],\u0026#34;course\u0026#34;:\u0026#34;Bachelor Data Science\u0026#34;,\u0026#34;lo\u0026#34;:\u0026#34;\u0026lt;br/\u0026gt;Learning Outcomes \u0026lt;br/\u0026gt;Being able to effectively communicate one\u0026#39;s strenghts and professional capacities\u0026lt;br/\u0026gt;Finding one’s own academic and professional interests and taking initiative in one’s own learning\u0026lt;br/\u0026gt;Planning and prototyping one\u0026#39;s own professional development\u0026lt;br/\u0026gt; \u0026lt;br/\u0026gt;Content \u0026lt;br/\u0026gt;The course is integrated to the Aaltonaut program to promote reflection, skill articulation and initiative. The course comprises workshops on different themes related to developing professional skills, independently building a learning portfolio, and taking part in feedback, reflection and goal setting activities.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026#34;} Indien ongeldig: {\u0026quot;error\u0026quot;:\u0026quot;not_found\u0026quot;,\u0026quot;reason\u0026quot;:\u0026quot;missing\u0026quot;}.\n2.2 Oefeningen: Voorbereidingswerk  Download CouchDB via https://couchdb.apache.org. Download de testdatabase JSON file Maak een nieuwe databases aan via de Fauxton Web-based admin tool. Open CouchDB, ga naar \u0026ldquo;Open Admin Console\u0026rdquo; of surf zelf naar http://127.0.0.1:5984/_utils/. Maak een database aan genaamd \u0026lsquo;courses\u0026rsquo;. Importeer de test JSON met curl in cmdnline:\ncurl -d @dump.db -H \u0026#34;Content-Type: application/json\u0026#34; -X POST http://127.0.0.1:5984/courses/_bulk_docs  De ongelukkigen op Windows kunnen curl for Windows downloaden, of Msys/MinGW/de besturingssystemen ISO gebruiken.\nNadien kan je in Fauxton op F5 drukken en zou je dit moeten zien:\nIk heb voor jullie de dump genomen door het omgekeerde (exporteren) te doen:\ncurl -X GET http://127.0.0.1:5984/courses/_all_docs\\?include_docs\\=true \u0026gt; dump.db Daarna volgt wat post-processing (rows wordt docs, elke doc moet in de root array zitten en _rev moet weg) om tot bovenstaande dump.db filte te komen.\n2.3 Oefeningen met Fauxton/Curl  Schrijf een Mango query die cursussen ophaalt waarbij het aantal ECTS punten groter is dan 5. Hoe voer je de query uit oefening 1 uit, zonder de Admin console, maar met curl? Selecteer alle documenten die als skill de waarde self-reflection én show initiative bevatten. Probeer zelf een dump te nemen van je eigen database zoals hierboven beschreven, met het _all_docs endpoint. Wat gebeurt er als je die dump opnieuw wilt importeren via het _bulk_docs endpoint? Maak een nieuwe database genaamd studenten. POST via curl enkele nieuwe documenten, met als template { name: $naam, age: $age, favouriteCourses: [$course1, $course2]} naar deze DB. Controleer in Fauxton of de records correct zijn ingegeven. Verzin zelf wat Mango queries om studenten te filteren. Maak een index aan op age voor je studenten database. Merk op dat indexes, zichtbaar in http://127.0.0.1:5984/_utils/#database/studenten/_index ook worden beschouwd als documenten op zich!  Tip: CouchDB heeft een eenvoudige ingebouwde query syntax genaamd Mango. Documentatie op https://github.com/cloudant/mango en http://127.0.0.1:5984/_utils/docs/intro/api.html#documents. Lees eerst na hoe dit in elkaar zit!\n2.4 Java Client API Als je geen toegang hebt tot de admin console, of je wenst vanuit een Java programma records weg te schrijven naar een Couch database (of query\u0026rsquo;s uit te voeren), dan heb je de Java API nodig.\nIn principe kan je met eender welke HTTP client REST calls uitvoeren en de responses zelf verwerken. Om het jezelf gemakkelijker te maken, gebruiken we hier ter illustratie LightCouch.\nLees de LightCouch Getting Started guide. Maak een nieuw gradle 6 project met de volgende dependencies:\ndependencies { implementation group: \u0026#39;org.lightcouch\u0026#39;, name: \u0026#39;lightcouch\u0026#39;, version: \u0026#39;0.2.0\u0026#39; } In je java/main/resources map dien je een couchdb.properties file aan te maken die verwijst naar de DB URL/poort/naam (zie getting started). Vanaf dan is het heel eenvoudig: Maak een CouchDbClient instantie aan. Nu kan je .save(), .shutdown() en .find() uitvoeren. Wat kan je bewaren? POJO (Plain Old Java Objects) klassen, waarbij alle members automatisch worden geserialiseerd.\nLightCouch oefeningen  Maak zoals hierboven beschreven een nieuw gradle project aan (IntelliJ?) en voeg LightCouch toe als dependency. Probeer naar een nieuwe database enkele objecten weg te schrijven. Gebruik hiervoor een Student klasse met als velden name en age (respectievelijk String en int als type). Controleer of dit is aangekomen in de admin console. Dat ziet er dan hopelijk zo uit:\n{ \u0026#34;_id\u0026#34;: \u0026#34;387a34be062140e4be1390e846242114\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;1-742f438439fd68bc6c67ca0d615f1469\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Joske\u0026#34;, \u0026#34;age\u0026#34;: 10 }  Probeer de views en query\u0026rsquo;s even uit. Zoek bijvoorbeeld alle studenten in List\u0026lt;Student\u0026gt; en druk de namen af door middel van System.out.println().\n  Denkvragen  Wat is het verschil tussen een key/value store en een document store? Kan je een verklaring geven waarom NoSQL databases zonder DB SCHEME werken, als je weet dat bijvoorbeeld CouchDB plain JSON objecten kan bewaren? Wat is het verschil tussen het bewaren van een JSON object via Curl en het bewaren van een POJO via LightCouc (De Client API verschillen zelf niet in rekening gebracht)?  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/transacties/",
	"title": "2. Transacties",
	"tags": [],
	"description": "",
	"content": " Transaction management  vanaf 16\u0026frasl;11. 2 lessen  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/nosql/mapreduce/",
	"title": "3. Advanced map/red. queries",
	"tags": [],
	"description": "",
	"content": " Deze oefeningen volgen de theorie van 11.3.3 op pagina 320.\nDeze oefeningen gaan verder op de database die je hebt opgezet in 2. document stores. Herinstalleer indien nodig en download de benodigde gegevens via de instructies (2.2 Oefeningen: voorbereidingswerk) in die link. Start voor onderstaande oefeningen de lokale CouchDB Server en de Admin Console (Project Fauxton) opnieuw op.\nZoals ook op de PouchDB docs vermeld staat; zijn mapreduce queries niet altijd nodig:\n Documenten op _id raadplegen gaat door middel van de Curl REST API Documenten sorteren of simpele queries uitvoeren gaat door middel van de Mango API, zoals reeds gezien. Dit zijn simpele queries, maar die volstaan meestal. Indien de DB store \u0026lt; 100.000 records bevat, zoals de onze, kan je ook simpelweg alles in-memory inladen (bijvoorbeeld in de browser), en met javascript zelf verder filteren:\nconst db = pouchdb.get(); // zoiets // ... const skillsOfBigCourses = db.filter(doc =\u0026gt; { return doc.ECTS \u0026gt; 6 }).map(doc =\u0026gt; { return skills }) // gebruik dit in een template HTML factory   Emit Een mapreduce query is in PouchDB uitvoerbaar met db.query() en in CouchDB deel van de _view API. Klik dus op het plusje + bij All Documents en dan op \u0026ldquo;new view\u0026rdquo;:\nDaar kan je een nieuwe \u0026ldquo;map\u0026rdquo; functie aanmaken:\nfunction (doc) { emit(doc._id, 1); }  Merk op dat hier de JavaScript syntax geldt. emit() betekent \u0026ldquo;geef als key deze waarde terug voor elk gevonden document\u0026rdquo;. Als je dit verandert naar doc.title wordt er een view aangemaakt die documenten op titel bewaart, om daar zeer snel in te kunnen zoeken. Bovenstaande functie wordt uitgevoerd voor elk document, vandaar de \u0026ldquo;map\u0026rdquo; in de naam. Het zou kunnen dat je filtert, vandaar de \u0026ldquo;reduce\u0026rdquo; in de naam.\nIk kan dus gewoon if() gebruiken, en zo documenten filteren. Alle cursussen gegeven in het tweede jaar of later:\nfunction (doc) { if(doc.year \u0026gt; 1) { emit(doc.title, 1); } }  Aggregeren Stel dat ik de totale ECTS punten wil verzamelen van alle Belgische vakken in de database. Dus: eerst filteren op country property, en daarna de som nemen van alle ECTS properties. Hoe doe je zoiets in SQL? Met SUM() en GROUP BY:\nSELECT title, SUM(ECTS) FROM courses WHERE country = \u0026#34;Belgium\u0026#34; GROUP BY title Hoe doe je zoiets in NoSQL/Mongo/CouchDB? Met Reduce Functions. Je kan in Fauxton bij het bewerken van je view een CUSTOM waarde in de Reduce combobox selecteren:\nDe rereduce parameter mag je negeren, dat betekent zoals de CouchDB docs verklaart:\n Reduce functions take two required arguments of keys and values lists - the result of the related map function - and an optional third value which indicates if rereduce mode is active or not. Rereduce is used for additional reduce values list, so when it is true there is no information about related keys (first argument is null).\n Dus, map functie om te filteren op België:\nfunction (doc) { if(doc.country == \u0026#34;Belgium\u0026#34;) { emit(doc._id, doc.ECTS); } }  Door ECTS in emit() mee te geven (als VALUE!) kunnen we in de reduce functie de array values manipuleren. En de reduce functie om de ECTS punten op te tellen:\nfunction (keys, values, rereduce) { return sum(values); }}  Klik op \u0026ldquo;Run Query\u0026rdquo;. De resultaten zijn de resultaten van de MAP - de Reduce value moet je expliciet enablen door vanboven rechts op \u0026ldquo;Options\u0026rdquo; te klikken, en dan \u0026ldquo;Reduce\u0026rdquo; aan te vinken:\nMerk op dat je met \u0026ldquo;Group Level\u0026rdquo; moet spelen (Op None zetten) om de groepering te doen werken, anders gaat de reduce functie de som nemen op elk indiviudeel document, wat uiteraard geen correct som is.\nMerk op dat reduce functies verschillende keren kunnen worden opgeroepen - en dat reduce reeds kan beginnen voordat map klaar is met zijn werk. Deze maatregelen zijn genomen om vlot om te kunnen gaan met miljarden records, verticaal verspreid over verschillende clusters.\nOefeningen  Maak een nieuwe view die documenten teruggeeft die in de titel het woord \u0026ldquo;project\u0026rdquo; bevatten. Werk case-insensistive. Vergeet niet dat het zou kunnen dat sommige documenten géén title property hebben, of deze null is. Wat dan? Schrijf een reduce query die voor alle bovenstaande titels het aantal cursussen weergeeft (enkel het aantal is voldoende) dat explicit op true heeft staan. Schrijf een view die de som neemt van alle ECTS punten van alle cursussen. Doe dit op drie manieren:  Met de ingebouwde _sum functie. Met een custom reduce en sum() zoals hierboven in het voorbeeld Met een custom reduce die values.reduce() gebruikt: zie docs Array.prototype.reduce(). Wat is volgens jou het fundamentele verschil tussen deze 3 opties? Op welk gebied?  Open de LightCouch oefening van 2. Document stores. Gebruik nu Java om de view die je hebt gemaakt in oefening 2 op te roepen met dbClient.view(). Zie LightCouch docs. Schrijf een view die het aantal optionele cursussen weergeeft waarvan \u0026ldquo;motivate others\u0026rdquo; een skill is.  Denkvragen  Waarom is het niet mogelijk in NoSQL databases om een simpele query uit te voeren die bijvoorbeeld auteurs opvraagt ouder dan een bepaalde leeftijd, en dan alle titels per auteur teruggeeft? (Hint: p. 321) Wat is het verschil tussen emit(doc._id, 1) en emit(doc._id, doc.year)?  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/apis/",
	"title": "3. Database APIs",
	"tags": [],
	"description": "",
	"content": " Database APIs  vanaf 23\u0026frasl;11. 4 lessen  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/nosql/replication/",
	"title": "4. Replication",
	"tags": [],
	"description": "",
	"content": " Met replication is het eenvoudig om clusters van clones te maken om de 99.9% uptime te kunnen garanderen, gegeven de juiste loadbalancing instellingen. Als voorbeeld gaan we een open-source JavaScript DB gebruiken genaamd PouchDB. PouchDB draait goed client-side in de browser, en interfacet heel gemakkelijk met zijn inspirator, CouchDB. Met Pouch is het een kwestie van een paar regeltjes code om replication aan te zetten tussen Pouch en de \u0026ldquo;master\u0026rdquo; Couch database, zoals ook zichtbaar op de Pouch website:\nvar db = new PouchDB(\u0026#39;dbname\u0026#39;); db.put({ _id: \u0026#39;dave@gmail.com\u0026#39;, name: \u0026#39;David\u0026#39;, age: 69 }); db.changes().on(\u0026#39;change\u0026#39;, function() { console.log(\u0026#39;Ch-Ch-Changes\u0026#39;); }); db.replicate.to(\u0026#39;http://example.com/mydb\u0026#39;);  Wat is het doel? Replication op te zetten tussen de cursussen database van 2. document stores en de PouchDB JS web-based client. Dat kan op verschillende manieren:\n Unidirectional replication. Zie PouchDB Docs Bidirectional replication. Live/Continuous replication.  Gebruik in de oefeningen de CDN versie om het jezelf gemakkelijk te maken. Maak een leeg .html bestand aan en kopieer de Quick Start code over:\n\u0026lt;script src=\u0026#34;//cdn.jsdelivr.net/npm/pouchdb@7.2.1/dist/pouchdb.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var db = new PouchDB(\u0026#39;my_database\u0026#39;); \u0026lt;/script\u0026gt; Vergeet niet dat je lokale CouchDB waarschijnlijk draait op poort 5984.\nOefeningen  Start CouchDB opnieuw met de bestaande courses db. Stel PouchDB in op unidirectionele replication. Alle LOKALE wijzigingen worden nu bewaard in de remote DB. Schrijf in Javascript ter test een nieuw fictief document weg met db.put(). Vul alle JSON properties in: kijk naar een bestaand document in je Couch database. Maak een nieuw .html bestand aan, en stel een remote URL in om vanuit JS onmiddellijk op de remote DB te kunnen queryen.  Gebruik de Mango query API van Pouch om in CouchDB de oefeningen van 2. document stores te implementeren. Gebruik de Mapreduce query API van Pouch om in CouchDB de oefeningen van 3. advanced map/red. queries te implementeren. Merk op dat voor map en reduce beiden uit te voeren, je een JSON object moet meegeven met beide functies: { map: function(doc) { emit(...); }, reduce: '_count}. Zie docs in link.  Maak een nieuw .html bestand aan, en stel continuous replication in. Voeg dan een nieuw document toe in de CouchDB Admin console. Maak in HTML een knop die gewoon records afdrukt via console.log(). Wordt het nieuwe document getoond? Gebruik deze boilerplate:\n\u0026lt;script src=\u0026#34;//cdn.jsdelivr.net/npm/pouchdb@7.2.1/dist/pouchdb.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Print docs\u0026lt;/button\u0026gt; \u0026lt;pre id=\u0026#34;pre\u0026#34;\u0026gt; ... \u0026lt;/pre\u0026gt; \u0026lt;script\u0026gt; function print(doc) { document.querySelector(\u0026#39;#pre\u0026#39;).innerHTML = JSON.stringify(doc); } var db = new PouchDB(\u0026#39;my_database\u0026#39;); // do your setup here  function queryDocs() { // do your thing here  print(\u0026#39;goed bezig\u0026#39;); } document.querySelector(\u0026#34;#btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, queryDocs); \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-1/",
	"title": "1. NoSQL Databases: Introductie",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-2/",
	"title": "2. NoSQL Databases: Advanced concepts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-3/",
	"title": "3. NoSQL Graphs, Case Studies",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-4/",
	"title": "4. Transactie Management",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-5/",
	"title": "5. Database APIs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/",
	"title": "Software ontwerp in C/C++",
	"tags": [],
	"description": "",
	"content": "  Databases  Laatste aanpassingen voor academiejaar 2020 - 2021.\nPlanning    nr datum onderwerp     1 ma 26-10-2020 NoSQL 1: intro HC   2 do 29-10-2020 NoSQL 2: key/value stores, document stores   3 ma 09-11-2020 NoSQL 3: advanced concepts, case studies (1) HC   4 do 12-11-2020 NoSQL 4: map/reduce, replication   5 ma 16-11-2020 NoSQL 5: Graph stores, case studies (2) HC   6 do 19-11-2020 Transactie management HC   7 do 23-11-2020 Transactie management labo   8 do 26-11-2020 Database APIs 1: ORM mapping, Hibernate   9 do 30-11-2020 Database APIs 2: H2, Sessy Lib   10 do 03-12-2020 Database APIs 3: Transacties in Java   11 do 07-12-2020 Database APIs 4: Sessy Lib naar CouchDB    Cursus notities Hoorcolleges Index pagina van alle hoorcolleges.\nOnderstaande hoorcolleges zijn complementair aan degene die via Toledo worden aangeboden.\n NoSQL Databases: Introductie - HF11 p.300 NoSQL Databases: Advanced concepts - HF11 p.334 Transactie Management - HF14 p.430 Database APIs - HF15 p.458  Labo noties  NoSQL:  NoSQL Databases: Key/Value stores NoSQL Databases: Document stores NoSQL Databases: Advanced map/reduce queries NoSQL Databases: Replication   Syllabus  Lesgevers: Coördinerend Verantwoordelijke: prof. dr. Kris Aerts - kris.aerts@kuleuven.be Onderwijsassistent: Wouter Groeneveld - wouter.groeneveld@kuleuven.be Kantoor: Technologiecentrum Diepenbeek, Groep ACRO, D.0.35. Verplicht handboek: Principles of Database Management, Wilfried Lemahieu  Cursusbeschrijving Dit opleidingsonderdeel focust enerzijds op drie soorten databases:\n relationele databases de NoSQL-alternatieven XML databases  En anderzijds op twee toepassingen:\n programmeren van database-gestuurde applicaties via API\u0026rsquo;s een inleiding in Big Data  Dit reflecteert zich in de volgende selectie van hoofdstukken uit het handboek:\n Part I. Databases and Database Design  1) Fundamental concepts of database management\n 3) Conceptual data modeling using the (E)ER model and UML class diagram  Part II. Types of Database Systems:  6) Relational databases: the relational model 7) Relational databases: structured query language (SQL) 10) XML databases 11) NoSQL databases (+ 16.7)  Part III. Physical Data Storage, Transaction Management, and Database Access  14) Basics of transaction management 15) Accessing databases and database APIs  Part IV. Data Warehousing, Data Governance and (Big) Data Analytics  19) Big data   Merk op dat we dus niet het volledige boek behandelen. Dit zou ver voorbij het bereik van 4 studiepunten gaan.Toch blijft de aankoop verantwoord aangezien andere boeken die dezelfde thema\u0026rsquo;s behandelen nog een pak duurder zijn en ook altijd overbodige hoofdstukken voor dit opleidingsonderdeel bevatten. Bovendien zijn de niet-behandelde thema\u0026rsquo;s interessant voor extra-curriculaire zelfstudie.\nVereiste voorkennis  Basiskennis van een Object-Geörienteerde programmeertaal als Java of C# Basiskennis van het UNIX systeem, werken met commandline  Doelstellingen Zie ook Studiegids UHasselt\nDe context en het overzicht worden aangereikt in het hoorcollege.\nAls practicum wordt een grotere probleemstelling als project uitgewerkt. Alle aan te leren aspecten van databases komen in dit project aan bod. Studenten kunnen facultatief buiten het practicum extra thematische oefeningen oplossen.\nKalender Zie collegeroosters UHasselt.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/db-course/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]