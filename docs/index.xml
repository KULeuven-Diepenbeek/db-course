<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Databases</title>
    <link>https://kuleuven-diepenbeek.github.io/db-course/</link>
    <description>Recent content in Index on Databases</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</webMaster><atom:link href="https://kuleuven-diepenbeek.github.io/db-course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Key/value stores</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/keyvaluestores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/keyvaluestores/</guid>
      <description>1.1 Persistente Hashmaps De eenvoudigst mogelijke noSQL database die gebruik maakt van key/values is een simpele HashMap&amp;lt;K,V&amp;gt; die je zelf serialiseert naar een flat file op de HDD. Een netwerk share kan dit bestand delen, maar locking systemen zullen moeten ingebouwd worden om te voorkomen dat dit bestand corrupt wordt.
De &amp;ldquo;oude&amp;rdquo; manier om dit te doen op de JVM is gebruik te maken van FileOutputStream:
fun main(args: Array&amp;lt;String&amp;gt;) { val db = mapOf(&amp;#34;Joske&amp;#34; to Student(&amp;#34;Joske&amp;#34;, 11)) val file = File(&amp;#34;database.</description>
    </item>
    
    <item>
      <title>2. Document stores</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/documentstores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/documentstores/</guid>
      <description>2.1 Eenvoudige CouchDB Queries    Lui in die zetel liggen, en vanaf de bank met gemak query&amp;rsquo;s lanceren? Geen probleem met CouchDB, een open source NoSQL JSON-based document store.
Mango CouchDB heeft een eenvoudige ingebouwde query syntax genaamd Mango. Documentatie op https://github.com/cloudant/mango en http://127.0.0.1:5984/_utils/docs/intro/api.html#documents. Selecteer een database, klik op &amp;ldquo;run a query with Mango&amp;rdquo;:
{ &amp;#34;selector&amp;#34;: { &amp;#34;year&amp;#34;: 3 } } De selector attribute bepaalt op welke keys er wordt gefilterd.</description>
    </item>
    
    <item>
      <title>3. Advanced map/red. queries</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/mapreduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/mapreduce/</guid>
      <description>Deze oefeningen volgen de theorie van 11.3.3 op pagina 320.
Deze oefeningen gaan verder op de database die je hebt opgezet in 2. document stores. Herinstalleer indien nodig en download de benodigde gegevens via de instructies (2.2 Oefeningen: voorbereidingswerk) in die link. Start voor onderstaande oefeningen de lokale CouchDB Server en de Admin Console (Project Fauxton) opnieuw op.
Zoals ook op de PouchDB docs vermeld staat; zijn mapreduce queries niet altijd nodig:</description>
    </item>
    
    <item>
      <title>4. Replication</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/replication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/replication/</guid>
      <description>Met replication is het eenvoudig om clusters van clones te maken om de 99.9% uptime te kunnen garanderen, gegeven de juiste loadbalancing instellingen. Als voorbeeld gaan we een open-source JavaScript DB gebruiken genaamd PouchDB. PouchDB draait goed client-side in de browser, en interfacet heel gemakkelijk met zijn inspirator, CouchDB. Met Pouch is het een kwestie van een paar regeltjes code om replication aan te zetten tussen Pouch en de &amp;ldquo;master&amp;rdquo; Couch database, zoals ook zichtbaar op de Pouch website:</description>
    </item>
    
    <item>
      <title>1. JDBC en JDBI</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/apis/jdbc-jdbi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/apis/jdbc-jdbi/</guid>
      <description>1.1 Queries/Objecten in JDBC Zie Transacties failures/rollbacks voor de initiële setup van een eenvoudige Java JDBC applicatie.
Stel dat we dezelfde studenten willen inladen in een Student klasse instantie: van de TABLE STUDENT naar de class Student. In geval van JDBC is dat veel handwerk:
 Maak een verbinding met de database. Voer de SELECT statements uit. Loop door de ResultSet en maak een nieuwe Student instantie aan. Vang alle mogelijke fouten zelf op: wat met lege kolommen, null?</description>
    </item>
    
    <item>
      <title>1. NoSQL Databases: Introductie</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1. Transaction Mgmt. Basics</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/basics/</guid>
      <description>SQL DBMS systemen zijn eerst en vooral multi-user systemen. Om zowel verschillende gebruikers te kunnen behandelen als nog steeds de ACID regels ondersteunen, is er een systeem nodig dat soms gebruikers &amp;ldquo;in wacht&amp;rdquo; zet. Stel je voor dat Jens en Jolien tegelijkertijd data lezen én updaten&amp;mdash;in dezelfde tabel, hetzelfde record. Jens leest uit &amp;ldquo;de rekening staat op 100 EUR&amp;rdquo; en Jolien haalt er 10 EUR vanaf. Wie mag eerst? Kan dit tegelijkertijd?</description>
    </item>
    
    <item>
      <title>2. Concurrency Control</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-control/</guid>
      <description>De transactie management scheduler (zie transacties - basics) is verantwoordelijk om verschillende transacties correct in te plannen zonder dat er data problemen of clashes optreden.
1. Problemen? Welke problemen? Denk terug aan het bank transfer probleem van de vorige sectie. Veronderstel dat deze keer zowel Jens als Marianne €10 willen overmaken naar Jolien. Als we dat als volgt doen:
 Verminder bedrag van source rekening Verhoog bedrag van destination rekening  Dan zou het kunnen dat bij het uitlezen van #2, Jolien&amp;rsquo;s rekening op €100 staat.</description>
    </item>
    
    <item>
      <title>2. JPA en Hibernate</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/apis/jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/apis/jpa/</guid>
      <description>2.1 Wat is JPA? JPA of de Java Persistence API is een deel van Java EE (Java Enterprise Platform), een set van specificaties die initiëel de JDK SE 8 versie uitbreidden met &amp;ldquo;enterprise&amp;rdquo; features zoals distributed computing en web services. J2EE wordt vooral ingezet als het gaat over grote applicaties die bedrijven ontwikkelen voor andere bedrijven (zogenaamde &amp;ldquo;B2B&amp;rdquo;, Business 2 Business, of Enterprise Software Development).
Ondertussen is J2EE omgevormd tot Jakarta EE.</description>
    </item>
    
    <item>
      <title>2. NoSQL Databases: Advanced concepts</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3. Extra Oefeningen</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/apis/ex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/apis/ex/</guid>
      <description>SESsy Library - Revisited Voorbereiding: Maak uzelf opnieuw vertrouwd met de SESsy Library applicatie, de geïntegreerde oefening uit het tweedejaarsvak Software Engineering Skills.
   Het is interessant om de libraries die de app gebruikt eens in detail te inspecteren. Dat kan met gradlew dependencies. In context van het vak Databasess zien we dat de webapp gebouwd is met de volgende relevante tools en libraries:
 Als database endpoint wordt com.</description>
    </item>
    
    <item>
      <title>3. Failures/Rollbacks</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/failures-rollbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/failures-rollbacks/</guid>
      <description>Voorbereidende CREATE statements (Dit is SQLite syntax!) Zie SQLite manual:
DROP TABLE IF EXISTS student; CREATE TABLE student( studnr INT NOT NULL PRIMARY KEY, naam VARCHAR(200) NOT NULL, voornaam VARCHAR(200), goedbezig BOOL ); DROP TABLE IF EXISTS log; CREATE TABLE log( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, date DATETIME DEFAULT CURRENT_TIMESTAMP, foreign_id INT NOT NULL, msg TEXT ); INSERT INTO student(studnr, naam, voornaam, goedbezig) VALUES (123, &amp;#39;Trekhaak&amp;#39;, &amp;#39;Jaak&amp;#39;, 0); INSERT INTO student(studnr, naam, voornaam, goedbezig) VALUES (456, &amp;#39;Peeters&amp;#39;, &amp;#39;Jos&amp;#39;, 0); INSERT INTO student(studnr, naam, voornaam, goedbezig) VALUES (890, &amp;#39;Dongmans&amp;#39;, &amp;#39;Ding&amp;#39;, 1); 1.</description>
    </item>
    
    <item>
      <title>3. NoSQL Graphs, Case Studies</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4. Concurrency in de Praktijk</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-in-practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-in-practice/</guid>
      <description>Meerdere threads met toegang tot de DB Quickstart project: examples/concurrency in de cursus repository (download repo zip). Het bevat een JDBC implementatie van de gekende studenten opgave, inclusief een Runnable thread worker die INSERT, UPDATE of DELETE statements issuen naar de database. Het probleem wat we hier proberen te simuleren is DIRTY READS.
Begeleidend filmpje:
 Oefeningen  Inspecteer de huidige code van het project en vergewis je ervan dat je alle stappen begrijpt.</description>
    </item>
    
    <item>
      <title>4. Transactie Management</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/hoorcolleges/slides-4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gebruikte Software</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/extra/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/extra/software/</guid>
      <description>Java/Kotlin/Gradle Zie het 2dejaarsvak Software Engineering Skills, SES/Gebruikte software. Voor SQL API software development oefeningen gebruiken we dezelfde tools: dezelfde Java JDK, optioneel een Kotlin SDK, ook de IntelliJ IDE, en ook Gradle als build tool. Weet je niet meer hoe deze te gebruiken, volg dan de links om je geheugen te verfrissen.
Tijdens labo&amp;rsquo;s gebruiken we vaak Gradle dependencies om te experimenteren met nieuwe soorten databases zoals Memcached, SQLite, JDBI en Hibernate.</description>
    </item>
    
  </channel>
</rss>
