<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Databases</title>
    <link>https://kuleuven-diepenbeek.github.io/db-course/</link>
    <description>Recent content in Index on Databases</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</webMaster><atom:link href="https://kuleuven-diepenbeek.github.io/db-course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. API Basics</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/apis/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/apis/basics/</guid>
      <description>Layered Application Tiers In software engineering worden applicaties logisch opgesplitst in verschillende &amp;ldquo;tiers&amp;rdquo;. Een typische 3-Tier webapplicatie bestaat uit 3 lagen: de laag die de gebruiker te zien krijgt&amp;mdash;de UI, bestaande uit HTML en CSS, de backend&amp;mdash;een server waar de requests naartoe worden gestuurd en die de aanvragen verwerkt, en een data laag die onze database voorstelt. Onderstaand schema vat dit samen (via Trevor N. Mudge):
   In de praktijk variëert deze tier benadering van project tot project.</description>
    </item>
    
    <item>
      <title>1. Big Data Basics</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/bigdata/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/bigdata/basics/</guid>
      <description>De Big in Big Data mag je letterlijk nemen. IBM berekende onlangs dat wij allemaal 2.5 quintillion bytes aan data genereren. Elke minuut meer dan 350.000 tweets, 75.000 uren van Netflix video streams, meer dan 35.000 Apple store apps gedownload, enzovoort.
De term Big Data is al sinds eind de jaren negentig aan een opmars bezig. We kunnen &amp;ldquo;grote datasets&amp;rdquo; categoriseren afhankelijk van wat we noemen de vijf Vs:
 Volume&amp;mdash;Het gaat (uiteraard) over een alsmaar groeiend &amp;ldquo;groot volume&amp;rdquo; aan data; Velocity&amp;mdash;De snelheid waarmee de data in en uit systemem vloeit die altijd maar toeneemt; Variety&amp;mdash;De range aan data types breidt altijd maar uit (JSON, XML, RDBMS, noSQL, files, &amp;hellip;); Veracity&amp;mdash;Hoe waarheidsgetrouw is de data eigenlijk wel?</description>
    </item>
    
    <item>
      <title>1. Database Basics</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/sql/rdbms-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/sql/rdbms-basics/</guid>
      <description>Een database is niet meer dan een verzameling van gegevens. DBMS (Database Management System) is de software waarmee databases beheerd of aangemaakt kunnen worden.
1. Waarom een database gebruiken? Een database wordt ook maar gewoon opgeslagen op een file system. Dus waarom kan ik dan niet zelf files gebruiken om mijn data op te slaan?
Databases bieden een aantal key features:
 Performant (index management) Betere integratie met andere applicaties DBMS voor bewerken of ophalen van data Concurrency ondersteuning Security &amp;amp; Privacy van data &amp;hellip;  In het tweedejaarsvak Besturingssystemen en C leerde je dat IO manipulatie heel dure operaties zijn.</description>
    </item>
    
    <item>
      <title>1. DDL</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/sql-ddl-dml/ddl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/sql-ddl-dml/ddl/</guid>
      <description>Data Defintion Language is de taal die we gebruiken om de structuur van onze database te veranderen. We kunnen hiermee tabellen aanmaken, wijzigen of verwijderen. Maar ook indexen, views, triggers of stored procedures worden hiermee aangemaakt.
Zowat elke RDBMS heeft tooling om DDL te doen via een handige interface, in plaats van dit zelf uit te schrijven. In de praktijk ga je waarschijnlijk met beiden in contact komen. We gaan DB Browser for SQLite gebruiken tijdens onze lessen.</description>
    </item>
    
    <item>
      <title>1. NoSQL Basics</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/basics/</guid>
      <description>Het schaalbaarheid probleem Het probleem met RDMS (relationele database management systems) is vaak schaalbaarheid. Gezien de ACID data validity voorwaarden is altijd de vraag: is dit schaalbaar?
Optie 1: Vertical scaling De makkelijke oplossing is &amp;ldquo;scaling up&amp;rdquo;: meer storage, CPU, RAM, &amp;hellip; voorzien zodat er meer cycles kunnen benut worden en hopelijk ook meer transacties concurrent kunnen worden verwerkt (zie transacties basics).
   Je botst hier echter snel op hardware limitaties&amp;mdash;niet alles is opgelost met een latje RAM.</description>
    </item>
    
    <item>
      <title>1. Transaction Mgmt. Basics</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/basics/</guid>
      <description>SQL DBMS systemen zijn eerst en vooral multi-user systemen. Om zowel verschillende gebruikers te kunnen behandelen als nog steeds de ACID regels ondersteunen, is er een systeem nodig dat soms gebruikers &amp;ldquo;in wacht&amp;rdquo; zet. Stel je voor dat Jens en Jolien tegelijkertijd data lezen én updaten&amp;mdash;in dezelfde tabel, hetzelfde record. Jens leest uit &amp;ldquo;de rekening staat op 100 EUR&amp;rdquo; en Jolien haalt er 10 EUR vanaf. Wie mag eerst? Kan dit tegelijkertijd?</description>
    </item>
    
    <item>
      <title>1. XML Basics</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/xml/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/xml/basics/</guid>
      <description>XML Data Storage XML staat voor Extensible Markup Language. Het is een taal die we gebruiken om met tags gegevens te structureren. Een tag opent zich op volgende manier: &amp;lt;boek&amp;gt; en sluit op deze manier: &amp;lt;/boek&amp;gt;. Je herkent misschien het gebruik van deze tags van HTML? Dat komt omdat HTML en XML allebei gegroeid zijn uit dezelfde taal (SGML).
Waarom XML gebruiken? XML is nog steeds een vaak voorkomende manier om data te structureren en definiëren.</description>
    </item>
    
    <item>
      <title>2. Concurrency Control</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-control/</guid>
      <description>De transactie management scheduler (zie transacties - basics) is verantwoordelijk om verschillende transacties correct in te plannen zonder dat er data problemen of clashes optreden.
1. Problemen? Welke problemen? Denk terug aan het bank transfer probleem van de vorige sectie. Veronderstel dat deze keer zowel Jens als Marianne €10 willen overmaken naar Jolien. Als we dat als volgt doen:
 Verminder bedrag van source rekening Verhoog bedrag van destination rekening  Dan zou het kunnen dat bij het uitlezen van #2, Jolien&amp;rsquo;s rekening op €100 staat.</description>
    </item>
    
    <item>
      <title>2. Data Warehousing &amp; BI</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/bigdata/datawarehousing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/bigdata/datawarehousing/</guid>
      <description>Tot nu toe hebben we ons toegelegd op het zo optimaal mogelijk bewaren en ophalen van data&amp;mdash;rekening houdend met integriteit en anderen ACID/BASE principes. Maar wat zijn we hier nu allemaal mee, los van een werkende applicatie? In dit hoofdstuk gaan we data benaderen vanuit business perspectief.
Een bedrijf kan gebaseerd op de miljoenen eenheden data dat het verzameld, op verschillende plekken en in verschillende formaten, beter beslissingen nemen. Strategische business beslissingen worden meestal op verschillende niveau&amp;rsquo;s genomen:</description>
    </item>
    
    <item>
      <title>2. Database Componenten</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/sql/rdbms-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/sql/rdbms-components/</guid>
      <description>1. Three Layer Architecture    Logical Layer De Logical Layer is waar we bepalen hoe onze data gestructureerd wordt. Hier bepalen we wat voor data we bijhouden, hoe die data eruitziet en hoe die zich gedraagt ten op zichte van onze andere datamodellen.
Enkele voorbeelden hiervan zijn:
 Een BOEK mag door maximum 0 of 1 PERSONEN ontleend worden. Een PERSOON mag meerdere BOEKEN ontlenen. Een PERSOON is een subtype van een GEBRUIKER.</description>
    </item>
    
    <item>
      <title>2. DML</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/sql-ddl-dml/dml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/sql-ddl-dml/dml/</guid>
      <description>Data Modification Language is de taal die we gebruiken om de data van onze database te bekijken of aan te passen. Met DML kunnen we CRUD operaties uitvoeren. Create, Read, Update en Delete.
SELECT SELECT is het commando dat we gebruiken om data op te vragen uit de database.
 SELECT { DISTINCT } expression FROM table { WHERE condition } LIKE operator LIKE wordt gebruikt om wildcard searches uit te voeren.</description>
    </item>
    
    <item>
      <title>2. JDBC en JDBI</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/apis/jdbc-jdbi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/apis/jdbc-jdbi/</guid>
      <description>1.1 Java Database Connectivity (JDBC) 1.1.1 Hoe verbind ik Java met de DB? JDBC is een interface in de JDK die ons in staat stelt om een connectie te openen naar een database. JDBC is een API: een abstracitelaag of een protocol. Dit betekent dat we met JDBC kunnen verbinden naar eender welke server van eender welke flavor: een Oracle SQL, MSSQL, of SQLite database. De database vendor wordt verborgen achter de JDBC laag.</description>
    </item>
    
    <item>
      <title>2. Key-value stores</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/keyvaluestores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/keyvaluestores/</guid>
      <description>1.1 Persistente Hashmaps De eenvoudigst mogelijke noSQL database die gebruik maakt van key/values is een simpele HashMap&amp;lt;K,V&amp;gt; die je zelf serialiseert naar een flat file op de HDD. Een netwerk share kan dit bestand delen, maar locking systemen zullen moeten ingebouwd worden om te voorkomen dat dit bestand corrupt wordt.
De &amp;ldquo;oude&amp;rdquo; manier om dit te doen op de JVM is gebruik te maken van FileOutputStream:
fun main(args: Array&amp;lt;String&amp;gt;) { val db = mapOf(&amp;#34;Joske&amp;#34; to Student(&amp;#34;Joske&amp;#34;, 11)) val file = File(&amp;#34;database.</description>
    </item>
    
    <item>
      <title>2. XSD</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/xml/xsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/xml/xsd/</guid>
      <description>XML Schema Definition Wanneer we met XML communiceren tussen twee verschillende partijen, hebben we natuurlijk ook spelregels nodig. Daarvoor kunnen we een XML schema of XSD gebruiken. Daarin leggen we vast:
 welke tags wel of niet mogen voorkomen, in welke volgorde die moeten staan, hoe vaak een element mag voorkomen, of een element optioneel of verplicht is, het datatype van het element, welke attributen op een tag toegelaten zijn  Ons vorige XML representatie van een collectie boeken kan met volgende XSD beschreven worden:</description>
    </item>
    
    <item>
      <title>3. ACID</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/sql/rdbms-acid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/sql/rdbms-acid/</guid>
      <description>ACID is een acronym die we gebruiken binnen databases dat een lijst van voorwaarden omschrijft waar dat database systeem aan moet voldoen. De regels van ACID worden over het algemeen geïmplementeerd door het concept van Transacties. ACID omschrijft vier principes:
 Atomicity Consistency Isolation Durability  De ACID principes komen in de praktijk nog verder aan bod in het hoofdstuk over RDBMS transacties, dus geen paniek als onderstaande theorie nog niet onmiddellijk duidelijk is.</description>
    </item>
    
    <item>
      <title>3. Document stores</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/documentstores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/documentstores/</guid>
      <description>0. Data filtering: recap Wat is een &amp;ldquo;mapreduce&amp;rdquo; functie nu weer precies? Weet je nog, in het eerstejaarsvak BES, in Python? Stel, we hebben een array [1, 2, 3, 4] en willen alle elementen verdubbelen. Dat kan erg eenvoudig met een list(map(lambda...)) statement:
range = [1, 2, 3, 4] result = list(map(lambda x: x * 2, range)) print(result) Hier gebruikten we een &amp;ldquo;lambda&amp;rdquo; om voor elk element een functie los te laten, die dat element transformeert, ofwel &amp;ldquo;mapt&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>3. Failures-Rollbacks</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/failures-rollbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/failures-rollbacks/</guid>
      <description>Voorbereidende CREATE statements (Dit is SQLite syntax!) Zie SQLite manual:
DROP TABLE IF EXISTS student; CREATE TABLE student( studnr INT NOT NULL PRIMARY KEY, naam VARCHAR(200) NOT NULL, voornaam VARCHAR(200), goedbezig BOOL ); DROP TABLE IF EXISTS log; CREATE TABLE log( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, date DATETIME DEFAULT CURRENT_TIMESTAMP, foreign_id INT NOT NULL, msg TEXT ); INSERT INTO student(studnr, naam, voornaam, goedbezig) VALUES (123, &amp;#39;Trekhaak&amp;#39;, &amp;#39;Jaak&amp;#39;, 0); INSERT INTO student(studnr, naam, voornaam, goedbezig) VALUES (456, &amp;#39;Peeters&amp;#39;, &amp;#39;Jos&amp;#39;, 0); INSERT INTO student(studnr, naam, voornaam, goedbezig) VALUES (890, &amp;#39;Dongmans&amp;#39;, &amp;#39;Ding&amp;#39;, 1); 1.</description>
    </item>
    
    <item>
      <title>3. JPA en Hibernate</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/apis/jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/apis/jpa/</guid>
      <description>2.1 Wat is JPA? JPA of de Java Persistence API is een deel van Java EE (Java Enterprise Platform), een set van specificaties die initiëel de JDK SE 8 versie uitbreidden met &amp;ldquo;enterprise&amp;rdquo; features zoals distributed computing en web services. J2EE wordt vooral ingezet als het gaat over grote applicaties die bedrijven ontwikkelen voor andere bedrijven (zogenaamde &amp;ldquo;B2B&amp;rdquo;, Business 2 Business, of Enterprise Software Development).
Ondertussen is J2EE omgevormd tot Jakarta EE.</description>
    </item>
    
    <item>
      <title>3. XPath</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/xml/xpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/xml/xpath/</guid>
      <description>XPath XPath is een taal die we gebruiken om specifieke elementen of attributen te vinden in een XML bestand. Zoals je in de voorbije oefeningen al hebt gemerkt zijn XML bestanden nogal groot en niet zo makkelijk in een oogopslag om alle informatie uit te halen.
Laten we ons voorbeeldbestand nemen:
&amp;lt;boeken&amp;gt; &amp;lt;boek genre=&amp;#34;Non-Fiction&amp;#34;&amp;gt; &amp;lt;titel&amp;gt;Mythos&amp;lt;/titel&amp;gt; &amp;lt;auteur&amp;gt;Stephen Fry&amp;lt;/auteur&amp;gt; &amp;lt;jaar&amp;gt;2017&amp;lt;/jaar&amp;gt; &amp;lt;/boek&amp;gt; &amp;lt;boek genre=&amp;#34;biography&amp;#34;&amp;gt; &amp;lt;titel&amp;gt;Scar Tissue&amp;lt;/titel&amp;gt; &amp;lt;auteur&amp;gt;Anthony Kiedis&amp;lt;/auteur&amp;gt; &amp;lt;jaar&amp;gt;2004&amp;lt;/jaar&amp;gt; &amp;lt;/boek&amp;gt; &amp;lt;boek genre=&amp;#34;fantasy&amp;#34;&amp;gt; &amp;lt;titel&amp;gt;The Lost Metal&amp;lt;/titel&amp;gt; &amp;lt;auteur&amp;gt;Brandon Sanderson&amp;lt;/auteur&amp;gt; &amp;lt;jaar&amp;gt;2022&amp;lt;/jaar&amp;gt; &amp;lt;/boek&amp;gt; &amp;lt;/boeken&amp;gt; XPath voorbeelden /</description>
    </item>
    
    <item>
      <title>4. Advanced map-red. queries</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/mapreduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/mapreduce/</guid>
      <description>Deze oefeningen gaan verder op de database die je hebt opgezet in het stuk over document stores. Herinstalleer indien nodig en download de benodigde gegevens via de instructies (2.2 Oefeningen: voorbereidingswerk) in die link. Start voor onderstaande oefeningen de lokale CouchDB Server en de Admin Console (Project Fauxton) opnieuw op.
Zoals ook op de PouchDB docs vermeld staat; zijn mapreduce queries niet altijd nodig:
 Documenten op _id raadplegen gaat door middel van de Curl REST API Documenten sorteren of simpele queries uitvoeren gaat door middel van de Mango API, zoals reeds gezien.</description>
    </item>
    
    <item>
      <title>4. Concurrency in de Praktijk</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-in-practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/transacties/concurrency-in-practice/</guid>
      <description>Meerdere threads met toegang tot de DB Quickstart project: examples/concurrency in de cursus repository (download repo zip). Het bevat een JDBC implementatie van de gekende studenten opgave, inclusief een Runnable thread worker die INSERT, UPDATE of DELETE statements issuen naar de database. Het probleem wat we hier proberen te simuleren is DIRTY READS.
Begeleidend filmpje:
 Oefeningen  Inspecteer de huidige code van het project en vergewis je ervan dat je alle stappen begrijpt.</description>
    </item>
    
    <item>
      <title>4. Extra Oefeningen</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/apis/extra-oefeningen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/apis/extra-oefeningen/</guid>
      <description>SESsy Library - Revisited Voorbereiding: Maak uzelf opnieuw vertrouwd met de SESsy Library applicatie, de geïntegreerde oefening uit het tweedejaarsvak Software Engineering Skills.
   Het is interessant om de libraries die de app gebruikt eens in detail te inspecteren. Dat kan met gradlew dependencies. In context van het vak Databasess zien we dat de webapp gebouwd is met de volgende relevante tools en libraries:
 Als database endpoint wordt com.</description>
    </item>
    
    <item>
      <title>5. Replication</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/nosql/replication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/nosql/replication/</guid>
      <description>Met replication is het eenvoudig om clusters van clones te maken om de 99.9% uptime te kunnen garanderen, gegeven de juiste loadbalancing instellingen. Als voorbeeld gaan we een open-source JavaScript DB gebruiken genaamd PouchDB. PouchDB draait goed client-side in de browser, en interfacet heel gemakkelijk met zijn inspirator, CouchDB. Met Pouch is het een kwestie van een paar regeltjes code om replication aan te zetten tussen Pouch en de &amp;ldquo;master&amp;rdquo; Couch database, zoals ook zichtbaar op de Pouch website:</description>
    </item>
    
    <item>
      <title>Gebruikte Software</title>
      <link>https://kuleuven-diepenbeek.github.io/db-course/extra/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/db-course/extra/software/</guid>
      <description>SQL SQL-gebaseerde oefeningen nemen plaats in de SQLite DB Browser omgeving, een visuele open source tool om eenvoudig database files te maken en bewerken die compatibel zijn met SQLite, een SQL variant.
Vanuit SQLiteBrowser kan je een nieuwe database aanmaken, een bestaande .SQL file openen en uitvoeren, of een bestaande .db SQLite database openen.
Voor het hoofdstuk SQL DDL &amp;amp; DML gebruiken we het chinook.db bestand dat je hier kan downloaden: chinook.</description>
    </item>
    
  </channel>
</rss>
