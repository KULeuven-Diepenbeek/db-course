<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2. GBA programming in C on Software Ontwerp in C(&#43;&#43;)</title>
    <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/</link>
    <description>Recent content in 2. GBA programming in C on Software Ontwerp in C(&#43;&#43;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</webMaster>
    
	<atom:link href="https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Voorbereiding Thuis</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/prep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/prep/</guid>
      <description>Installaties Volg de installatieinstructies en zorg ervoor dat de devkitPro tools geïnstalleerd zijn:
 DevkitPro installatie om te cross-compilen en toe te voegen aan je PATH variabele. Download een GBA emulator, bij voorkeur mGBA, via mgba.io.  Controle  Controleer in cmdnline of arm-eabi-none-gcc in eender welke locatie werkt. Ga naar de labo 3 opgave en probeer eerste opgave te downloaden en compileren met de Makefile. Oplossen hoeft nog niet.</description>
    </item>
    
    <item>
      <title>Labo 3: Introductie in GBA Programming</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/labo-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/labo-3/</guid>
      <description>Je hebt nu een crashcrusus C achter de kiezen met een grondige focus op pointers. Hoog tijd om die kennis om te zetten in iets concreet én plezant. We gaan een héél simpel Gameboy Advance (GBA) spel ontwikkelen.
De GBA is een goede keuze om de kracht (en zwakheden) van C te demonstreren. Er is immers géén besturingsyssteem aanwezig. Er zijn géén libraries aanwezig voor memory management, IO, files, error handling, &amp;hellip; Het is een embedded hardware systeem dat een cross-compiler vereist: een compiler op onze PC&amp;rsquo;s dat compileert voor een ander platform en CPU, namelijk een 32-bit ARM op 16.</description>
    </item>
    
    <item>
      <title>Labo 4: GBA Tilesets, een simpel spel</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/labo-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-c/labo-4/</guid>
      <description>In labo 3 maakten we kennis met de Gameboy Advance en het ontwikkelplatform - als je het zo kan noemen. We gebruikten mode 3 om pixels te manipuleren. Natuurlijk is dat erg onpraktisch en veel te belastend wanneer er veel op het scherm getekend moet worden. Als doelstelling voor labo 4 willen we een simpel geïntegreerd spelletje maken waar we video mode 1 en tilesets voor nodig hebben.
Het overzicht van I/O registers leert ons dat 0x06000000 - 0x06017FFF 96kb aan Video RAM of VRAM voorziet waar we mee kunnen spelen zonder pixel per pixel te manipuleren.</description>
    </item>
    
  </channel>
</rss>