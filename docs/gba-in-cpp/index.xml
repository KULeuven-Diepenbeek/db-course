<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4. GBA Programming in C&#43;&#43; on Software Ontwerp in C(&#43;&#43;)</title>
    <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/</link>
    <description>Recent content in 4. GBA Programming in C&#43;&#43; on Software Ontwerp in C(&#43;&#43;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</webMaster>
    
	<atom:link href="https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Voorbereiding Thuis</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/prep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/prep/</guid>
      <description> Installaties Volg de installatieinstructies en zorg ervoor dat:
 CLion geïnstalleerd is indien gewenst (of een Een andere geïntegreerde IDE geïnstalleerd is)  Controle  Compileer gba-sprite-engine Lees de README Controleer of de demo&amp;rsquo;s werken door een .gba bestand te openen in de mGBA emulator  </description>
    </item>
    
    <item>
      <title>Labo 8: GBA Programming in C&#43;&#43;: een abstractielaag</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-8/</guid>
      <description>Het zal je ondertussen wel al duidelijk zijn dat technische details zoals IO pointers en OAM vanuit labo 4 de code er niet bepaald duidelijker op maken. Jammer genoeg voorziet de GBA geen andere mogelijkheden. Een oplossing zal van de ontwikkelaar zelf moeten komen, in de vorm van de principes uit labo 7.
Abstracties creëren Als ontwikkelaar wil ik niet altijd bezig zijn met de juiste hexadecimale waarde voor IO pointer aan te spreken om een sprite te renderen.</description>
    </item>
    
    <item>
      <title>Labo 9: GBA Programming in C&#43;&#43;: scrolling backgrounds</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-9/</guid>
      <description>Uit labo 4 weten we hoe het VRAM van de GBA in elkaar steekt: het bestaat uit char en screen blocks. Character blocks 0 tot en met 3 vanaf 0x6010000 zijn gereserveerd voor achtergrond lagen: dat is in totaal meer geheugen dan voor sprites. De Gameboy Advance voorziet aparte registers om de 4 achtergrond lagen te configureren.
Voor sprites speelde een tilemap geen rol, voor grote achtergronden wel: het kost immers minder ruimte om de tile data apart op te slaan en in een map per tile te refereren naar die data.</description>
    </item>
    
    <item>
      <title>Labo 10: Een introductie in GUI ontwerp met C&#43;&#43; in Qt</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-10/</guid>
      <description>UI Frameworks De C++ taal is een krachtige tool om native code te compileren voor specifieke CPU en OS systemen. Daardoor is het ook vaak een logische keuze om complexe interfaces in te ontwerpen en ontwikkelen, van Photoshop tot Google Chrome. Interfaces brengen echter weer andere problemen met zich mee: elk besturingssysteem heeft ondertussen zijn eigen interpretatie.
De Windows standaard was MFC die de WinAPI wrapt, voor OSX was dit de Carbon API.</description>
    </item>
    
    <item>
      <title>Labo 11: een GBA spel porten naar Qt</title>
      <link>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld, Kris Aerts)</author>
      <guid>https://kuleuven-diepenbeek.github.io/cpp-course/gba-in-cpp/labo-11/</guid>
      <description>Eigen widgets implementeren De objectenboom uit labo 10 leert ons dat heel wat Qt objecten afleiden van QWidget. Dat is de ideale startplaats om zelf een widget te implementeren. Veel Qt objecten voorzien een override om het tekenen zelf af te kunnen handelen, vergelijkbaar met de while loop in een typisch gameboy spel.
void paintEvent(QPaintEvent *event) override; In het Textrix Qt Voorbeeld wordt er gebruikt gemaakt van custom QFrame en QWidget implementaties die eigen objecten bijhouden die de tetris blokken voorstellen.</description>
    </item>
    
  </channel>
</rss>